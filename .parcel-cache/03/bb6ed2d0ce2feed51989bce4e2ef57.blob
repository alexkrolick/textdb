"use strict";

var _preact = require("preact");

var _hooks = require("preact/hooks");

var _xstate = require("xstate");

var io = _interopRequireWildcard(require("./io"));

require("./app.scss");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// import FeatherIcon from "feather-icons-react";
// import { useMachine } from "@xstate/react";
const toggleMachine = (0, _xstate.createMachine)({
  id: "toggle",
  initial: "inactive",
  context: {
    count: 0
  },
  states: {
    inactive: {
      on: {
        TOGGLE: "active"
      }
    },
    active: {
      entry: (0, _xstate.assign)({
        count: ctx => ctx.count + 1
      }),
      on: {
        TOGGLE: "inactive"
      }
    }
  }
});

function reducer(state, action) {}

function App() {
  const [err, setError] = (0, _hooks.useState)(null);
  const [files, setFiles] = (0, _hooks.useState)([]);

  const pickFolder = async () => {
    const folderPath = await io.pickFolder();
    console.log({
      folderPath
    });
    const dirFiles = await io.loadFolder(folderPath).catch(setError);
    console.log({
      dirFiles
    });

    if (dirFiles) {
      setFiles(dirFiles);
    }
  };

  return (0, _preact.h)("div", {
    className: "App"
  }, (0, _preact.h)("div", {
    class: "container py-3 px-3"
  }, (0, _preact.h)("h1", {
    class: "title"
  }, "TextDB"), (0, _preact.h)("p", {
    class: "subtitle"
  }, "Modern Times Are Here At Last"), err && (0, _preact.h)("div", {
    class: "message is-danger"
  }, (0, _preact.h)("div", {
    class: "message-header"
  }, (0, _preact.h)("p", null, "Error"), (0, _preact.h)("button", {
    class: "delete",
    "aria-label": "delete",
    onClick: () => {
      setError(null);
    }
  })), (0, _preact.h)("div", {
    class: "message-body"
  }, err)), (0, _preact.h)("div", {
    class: "field"
  }, (0, _preact.h)("div", {
    class: "control"
  }, (0, _preact.h)("input", {
    class: "input",
    type: "text",
    placeholder: "Input"
  }))), (0, _preact.h)("div", {
    class: "field"
  }, (0, _preact.h)("p", {
    class: "control"
  }, (0, _preact.h)("span", {
    class: "select"
  }, (0, _preact.h)("select", null, files && files.map(f => {
    return (0, _preact.h)("option", {
      value: f.path
    }, f.name);
  }))))), (0, _preact.h)("div", {
    class: "buttons"
  }, (0, _preact.h)("a", {
    class: "button is-primary",
    onClick: pickFolder
  }, "Folder"), (0, _preact.h)("a", {
    class: "button is-link"
  }, "Link"))));
}

(0, _preact.render)((0, _preact.h)(App, null), document.body);